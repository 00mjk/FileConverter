<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="ActionWhenConversionSucceedDescription" xml:space="preserve">
    <value>Allow you to chose what you want to do with your input files if the conversion succeed</value>
  </data>
  <data name="ActionWhenConversionSucceedTitle" xml:space="preserve">
    <value>Action when conversion succeed</value>
  </data>
  <data name="AddNewPreset" xml:space="preserve">
    <value>Add new preset (duplicate selected preset)</value>
  </data>
  <data name="Application" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="AudioTitle" xml:space="preserve">
    <value>Audio</value>
  </data>
  <data name="AutomaticallyCheckForUpdates" xml:space="preserve">
    <value>Automatically check for updates when File Converter starts</value>
  </data>
  <data name="AutomaticallyExitWhenAllConversionsFinished" xml:space="preserve">
    <value>Automatically exit when all conversions finished</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ConversionPresets" xml:space="preserve">
    <value>Conversion Presets</value>
  </data>
  <data name="Encoding" xml:space="preserve">
    <value>Encoding :</value>
  </data>
  <data name="EncodingSpeed" xml:space="preserve">
    <value>Encoding speed :</value>
  </data>
  <data name="FileNameTemplate" xml:space="preserve">
    <value>File name template</value>
  </data>
  <data name="FramesPerSecond" xml:space="preserve">
    <value>Frames per second :</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>help ?</value>
  </data>
  <data name="InputExample" xml:space="preserve">
    <value>Input example</value>
  </data>
  <data name="InputFormats" xml:space="preserve">
    <value>Input formats</value>
  </data>
  <data name="MoveDownSelectedPreset" xml:space="preserve">
    <value>Move down selected preset</value>
  </data>
  <data name="MoveUpSelectedPreset" xml:space="preserve">
    <value>Move up selected preset</value>
  </data>
  <data name="Mp3CbrDescrption" xml:space="preserve">
    <value>Constant bitrate encoding</value>
  </data>
  <data name="Mp3VbrDescription" xml:space="preserve">
    <value>Variable bitrate encoding</value>
  </data>
  <data name="NinetyDegreesRotationTitle" xml:space="preserve">
    <value>90°</value>
  </data>
  <data name="NinetyDegreesRotationTooltip" xml:space="preserve">
    <value>90° counter clockwise rotation</value>
  </data>
  <data name="OneEightyDegreesRotationTitle" xml:space="preserve">
    <value>180°</value>
  </data>
  <data name="OneEightyDegreesRotationTooltip" xml:space="preserve">
    <value>180° rotation</value>
  </data>
  <data name="OuputFileNameTemplateSample" xml:space="preserve">
    <value>C:\Music\Artist\Album\Song.wav</value>
  </data>
  <data name="OutputExample" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="OutputFilePathTemplateHelp" xml:space="preserve">
    <value>(p): input file path
(f): input filename
(o): output extension type
(i): input extension type
(d0): input parent folder
(d1): input sub parent folder
...
use maj for uppercase version

Special paths:
(p:d): my documents path
(p:m): my music path
(p:v): my videos path
(p:p): my pictures path</value>
  </data>
  <data name="OutputFormat" xml:space="preserve">
    <value>Output format</value>
  </data>
  <data name="Preset" xml:space="preserve">
    <value>Preset</value>
  </data>
  <data name="PresetName" xml:space="preserve">
    <value>Preset Name</value>
  </data>
  <data name="Quality" xml:space="preserve">
    <value>Quality :</value>
  </data>
  <data name="RecommendeBitrateRangeInBlue" xml:space="preserve">
    <value>Recommended bitrate range in blue</value>
  </data>
  <data name="RemoveSelectedPreset" xml:space="preserve">
    <value>Remove selected preset</value>
  </data>
  <data name="Rotate" xml:space="preserve">
    <value>Rotate :</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Scale" xml:space="preserve">
    <value>Scale :</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="TwoSeventyDegreesRotationTitle" xml:space="preserve">
    <value>270°</value>
  </data>
  <data name="TwoSeventyDegreesRotationTooltip" xml:space="preserve">
    <value>90° clockwise rotation</value>
  </data>
  <data name="VideoEncodingQualityTooltip" xml:space="preserve">
    <value>Define the ratio 'file size' versus 'video quality'. A lower value will give you a smaller file, a greater value give you a better video quality.</value>
  </data>
  <data name="VideoEncodingSpeedTooltip" xml:space="preserve">
    <value>Define the ratio 'file size' versus 'compression duration'. A slow compression will give you a smaller file (for the same video quality) than a faster compression.</value>
  </data>
  <data name="VideoTitle" xml:space="preserve">
    <value>Video</value>
  </data>
  <data name="Wav16bitsDescription" xml:space="preserve">
    <value>PCM signed 16-bit little-endian</value>
  </data>
  <data name="Wav24bitsDescription" xml:space="preserve">
    <value>PCM signed 24-bit little-endian</value>
  </data>
  <data name="Wav32bitsDescription" xml:space="preserve">
    <value>PCM signed 32-bit little-endian</value>
  </data>
  <data name="Wav8bitsDescription" xml:space="preserve">
    <value>PCM signed 8-bit little-endian</value>
  </data>
  <data name="ZeroDegreesRotationTitle" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="ZeroDegreesRotationTooltip" xml:space="preserve">
    <value>No rotation</value>
  </data>
</root>